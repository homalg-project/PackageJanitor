#!/bin/bash

set -e

GAP_PKG_DIR=~/.gap/pkg/
JULIA_PKG_DIR=~/.julia/dev/

if [ "$#" -ne 1 ]; then
	echo "Usage: gap_to_julia PKG_NAME"
	exit 1
fi

PKG_NAME="$1"
PKG_NAME_LOWERCASE=$(echo "$PKG_NAME" | tr '[:upper:]' '[:lower:]')

if [ -d "$GAP_PKG_DIR$PKG_NAME" ]; then
	PKG_FULL_NAME="$PKG_NAME"
elif [ -d "$GAP_PKG_DIR/CAP_project/$PKG_NAME" ]; then
	PKG_FULL_NAME="CAP_project/$PKG_NAME"
elif [ -d "$GAP_PKG_DIR/CategoricalTowers/$PKG_NAME" ]; then
	PKG_FULL_NAME="CategoricalTowers/$PKG_NAME"
else
	echo "Could not find GAP package $PKG_NAME"
	exit 1
fi

if [ ! -d "$JULIA_PKG_DIR$PKG_NAME" ]; then
	echo "Could not find Julia package $PKG_NAME"
	exit 1
fi

mkdir -p "$JULIA_PKG_DIR$PKG_NAME/src/gap/"
mkdir -p "$JULIA_PKG_DIR$PKG_NAME/docs/src/"

if [ -d "$GAP_PKG_DIR$PKG_FULL_NAME/gap/precompiled_categories/" ]; then
	mkdir -p "$JULIA_PKG_DIR$PKG_NAME/src/gap/precompiled_categories/"
fi

cp "$(dirname $(realpath $0))/files/LICENSE" "$JULIA_PKG_DIR$PKG_NAME/LICENSE"

cp -u "$(dirname $(realpath $0))/init.jl" "$JULIA_PKG_DIR$PKG_NAME/src/init.jl"
cmp -s "$(dirname $(realpath $0))/init.jl" "$JULIA_PKG_DIR$PKG_NAME/src/init.jl" || echo "init.jl in Julia package was modified, not overwriting"

cat > "$JULIA_PKG_DIR$PKG_NAME/makefile" << EOS
.PHONY: test

gen:
	gap_to_julia $PKG_NAME

test:
	julia -e 'using Pkg; Pkg.test("$PKG_NAME");'
EOS

cd "$GAP_PKG_DIR$PKG_FULL_NAME"

cat "init.g" | sed "s/ReadPackage( \"$PKG_NAME\", /include( /g" | sed 's/" );$/.autogen.jl" );/' > "$JULIA_PKG_DIR$PKG_NAME/src/init.g.autogen.jl"
cat "read.g" | sed "s/ReadPackage( \"$PKG_NAME\", /include( /g" | sed 's/" );$/.autogen.jl" );/' > "$JULIA_PKG_DIR$PKG_NAME/src/read.g.autogen.jl"

cd gap

chmod u+w "$JULIA_PKG_DIR$PKG_NAME"/src/gap/*.autogen.jl || true

syntax_replacements() {
	sed 's/ = / == /g' \
	| sed 's/ <> / != /g' \
	| sed 's/ :=/ =/g' \
	| sed 's/ : /; /g' \
	| sed 's/ :$/,/g' \
	| sed 's/!\././g' \
	| sed 's/^\(\s*\)if /\1if (/g' \
	| sed 's/^\(\s*\)elif /\1elseif (/g' \
	| sed 's/ then$/)/g' \
	| sed 's/fi;$/end;/g' \
	| sed 's/ do$//g' \
	| sed 's/od;$/end;/g' \
	`# We turn "not" into a macro "@not" which causes problems with "or", see gap_emulation.jl. To reduce the number if places which have to be adjust manually, we insert the parantheses here for three special cases.` \
	| sed 's/not \([^()]*([^()]*)\) or/not (\1) or/g' `# match "not func( arguments ) or"` \
	| sed 's/not \([^()][^()]*([^()]*([^()]*)[^()]*)\) or/not (\1) or/g' `# match "not func( ... func2( arguments ) ... ) or"` \
	| sed 's/not \([^()][^()]*([^()]*([^()]*)[^()]*([^()]*)[^()]*)\) or/not (\1) or/g' `# match "not func( ... func2( arguments ) ... func3( arguments ) ... ) or"` \
	| sed 's/"\([^"]*\)"/⦇\1⦈/g' `# replace pairs of quotation marks by special brackets so we can later selectively replace things inside strings` \
	| sed '/^\s*#/! s/ and / \&\& /g' \
	| sed '/^\s*#/! s/ and$/ \&\&/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' `# re-replace "&&" by "and" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed '/^\s*#/! s/ or / || /g' \
	| sed '/^\s*#/! s/ or$/ ||/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' `# re-replace "||" by "or" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed '/^\s*#/! s/not\s*(/!(/g' \
	| sed '/^\s*#/! s/not /@not /g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' `# re-replace "@not" by "not" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)⦈/"\1"/g' `# replace special brackets by quotation marks again` \
	| sed 's/for \([^⥉]*\) ⥉ \([^⥉]*\)$/for \1 in \2/g' \
	| sed 's/\.( \([^)]*\) )/[\1]/g' \
	| sed 's/\.(\([^)]*\))/[\1]/g' \
	| sed 's/\[ \([^].[]*\) \.\. \([^][]*\) \]/(\1):(\2)/g' `# [ a .. b ] -> (a):(b) where a and b do not contain square brackets` \
	| sed 's/\[ \([^].[]*\) \.\. \([^][]*\)\[\([^].[]*\)\]\([^][]*\) \]/(\1):(\2[\3]\4)/g' `# [ a .. b ] -> (a):(b) where b contains a pair of square brackets` \
	| sed 's/{ arg } ->/( arg... ) ->/g' \
	| sed 's/{\([^}]*\)} ->/(\1) ->/g' \
	| sed 's/{/[/g' \
	| sed 's/}/]/g' \
	| sed 's/function( arg )/function( arg... )/g' \
	| sed 's/function ( arg )/function ( arg... )/g' \
	| sed 's/Method( \\\[\\\],/Method( getindex,/g' \
	| sed 's/Method( \\=,/Method( ==,/g' \
	| sed 's/Method( \\+,/Method( +,/g' \
	| sed 's/Method( \\-,/Method( -,/g' \
	| sed 's/Method( \\\*,/Method( *,/g' \
	| sed 's/Method( \\\/,/Method( \/,/g' \
	| sed 's/Method( \\in,/Method( in,/g' \
	| sed 's/^DeclareInfoClass(/@DeclareInfoClass(/g' \
	| sed 's/^DeclareAttribute(/@DeclareAttribute(/g' \
	| sed 's/^DeclareSynonymAttr(/@DeclareSynonymAttr(/g' \
	| sed 's/^DeclareProperty(/@DeclareProperty(/g' \
	| sed 's/^DeclareFilter(/@DeclareFilter(/g' \
	| sed 's/^DeclareCategory(/@DeclareFilter(/g' \
	| sed 's/^InstallValue(/@InstallValueConst(/g' \
	| sed 's/InstallValue(/@InstallValue(/g' \
	| sed 's/BindGlobal(/@BindGlobal(/g' \
	| sed 's/DeclareSynonym(/@BindGlobal(/g' \
	| sed 's/DeclareGlobalFunction(/@DeclareGlobalFunction(/g' \
	| sed 's/InstallGlobalFunction(/@InstallGlobalFunction(/g' \
	| sed 's/^DeclareOperation(/@DeclareOperation(/g' \
	| sed 's/^DeclareOperationWithCache(/@DeclareOperation(/g' \
	| sed 's/^KeyDependentOperation(/@KeyDependentOperation(/g' \
	| sed 's/^InstallOtherMethod(/InstallMethod(/g' \
	| sed 's/^InstallMethodForCompilerForCAP(/InstallMethod(/g' \
	| sed 's/^InstallOtherMethodForCompilerForCAP(/InstallMethod(/g' \
	| sed 's/^InstallMethod(/@InstallMethod(/g' \
	| sed 's/\brec(/@rec(/g' \
	| sed 's/\bAssert(/@Assert(/g' \
	| sed 's/\bConcatenation(/@Concatenation(/g' \
	| sed 's/\bInfo(/@Info(/g' \
	| sed 's/\bUnbind(/@Unbind(/g' \
	| sed 's/\bIsBound(/@IsBound(/g' \
	| sed 's/\bNTuple\b/@NTupleGAP/g' \
	| sed 's/\bFunctionWithNamedArguments\b/@FunctionWithNamedArguments/g' \
	| sed 's/CAP_NAMED_ARGUMENTS\.//g' \
	| sed 's/\bPair\b/PairGAP/g' \
	| sed 's/\bUnion\b/UnionGAP/g' \
	| sed 's/\bInt\b/IntGAP/g' \
	| sed 's/\bString\b/StringGAP/g' \
	| sed 's/\bSet\b/SetGAP/g' \
	| sed 's/\bNumber\b/NumberGAP/g' \
	# terminate line continuation
}
export -f syntax_replacements

test_replacements() {
	if [ "$1" = "CAP" ]; then
		USING="using MonoidalCategories; using $1"
	elif [ "$1" = "MonoidalCategories" ]; then
		USING="using CAP; using $1"
	elif [ "$1" = "CartesianCategories" ]; then
		USING="using CAP; using $1"
	elif [ "$1" = "Toposes" ]; then
		USING="using CAP; using CartesianCategories; using FinSetsForCAP; using $1"
	elif [ "$1" = "FinSetsForCAP" ]; then
		USING="using CAP; using CartesianCategories; using Toposes; using $1"
	elif [ "$1" = "ZXCalculusForCAP" ]; then
		USING="using CAP; using MonoidalCategories; using $1"
	elif [ "$1" = "LinearAlgebraForCAP" ]; then
		USING="using MatricesForHomalg; using CAP; using MonoidalCategories; using $1"
	else
		>&2 echo "Unkown package $1, please explicitly add its dependencies"
		USING="using CAP; using $1"
	fi
	# first, revert some code changes also affecting output lines
	sed '/^[>g]/! s/(\([0-9]*\)):(\([0-9]*\))/[ \1 .. \2 ]/g' \
	| sed '/^[>g]/! s/&&/and/g' \
	| sed 's/^<A[n ].*object in /<An object in /g' \
	| sed 's/^A[n ].*object in /An object in /g' \
	| sed 's/^<A[n ].*morphism in /<A morphism in /g' \
	| sed 's/^A[n ].*morphism in /A morphism in /g' \
	| sed 's/ @not yet algorithmically/ not yet algorithmically/g' \
	| sed 's/^gap> /julia> /g' \
	| sed 's/^> /        /g' \
	| sed 's/;$//g' \
	| sed 's/julia> LoadPackage( .*/julia> true/g' \
	| sed '/^#/d' \
	| sed 's/julia> /\njulia> /g' \
	| sed "s/julia> START_TEST(.*/\`\`\`jldoctest\njulia> $USING/g" \
	| sed 's/julia> STOP_TEST(.*/```/g' \
	# terminate line continuation
}
export -f test_replacements

for FILE in $(git ls-files); do
	cat "$FILE" | syntax_replacements > "$JULIA_PKG_DIR$PKG_NAME"/src/gap/"$FILE".autogen.jl
done

chmod a-w "$JULIA_PKG_DIR$PKG_NAME"/src/gap/*.autogen.jl

cd ../tst

chmod u+w "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.autogen.md || true

# use perl to handle line continuation and empty lines starting comments
find . \( -type d -name .git -prune \) -o \( -type f -name '*.tst' \) -exec bash -c "cat '{}' | perl -p -e 's/\\\\\\n//' | perl -0 -p -e 's/\\n\\n#.*\\n/\\n/g' | syntax_replacements | test_replacements $PKG_NAME > \"$JULIA_PKG_DIR$PKG_NAME\"/docs/src/'{}'.autogen.md" \;

rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/100_LoadPackage.tst.autogen.md

if [ "$PKG_NAME" = "CAP" ]; then
	# DummyRing
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap02.tst.autogen.md
	
	# ReadPackage
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap11.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap12.tst.autogen.md

	# HomalgRingOfIntegers/HomalgFieldOfRationals
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap13.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap14.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap15.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap16.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap17.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap18.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap21.tst.autogen.md

	# Functor example (continued)
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap03.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap04.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap05.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap06.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap07.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap08.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/cap09.tst.autogen.md

	# needs CapCat
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/CAP_INTERNAL_ASSERT_VALUE_IS_OF_TYPE_GETTER.tst.autogen.md
fi

if [ "$PKG_NAME" = "FinSetsForCAP" ]; then
	# remove tests needing CompilerForCAP
	rm -f $(grep -l "CapJitPrecompileCategoryAndCompareResult(" "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.tst.autogen.md)
	rm -f $(grep -l "CapJitCompiledFunction(" "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.tst.autogen.md)
fi

if [ "$PKG_NAME" = "MonoidalCategories" ]; then
	# needs GaussForHomalg
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/monoidalcategories01.tst.autogen.md
fi

if [ "$PKG_NAME" = "Toposes" ]; then
	# remove tests computing HasPushoutComplement
	# the one using FinSets runs out of memory in GitHub actions
	rm -f $(grep -l "HasPushoutComplement(" "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.tst.autogen.md)
	# LazyCategory is not yet available in Julia
	rm -f $(grep -l "LazyCategory(" "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.tst.autogen.md)
fi

if [ "$PKG_NAME" = "ZXCalculusForCAP" ]; then
	# remove tests needing CompilerForCAP
	rm -f $(grep -l "CapJitPrecompileCategoryAndCompareResult(" "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.tst.autogen.md)
fi

# merge AutoDocTests into one big testfile to execute in the correct order
if compgen -G "$JULIA_PKG_DIR$PKG_NAME"/docs/src/"$PKG_NAME_LOWERCASE"*.tst.autogen.md > /dev/null; then
	cat "$JULIA_PKG_DIR$PKG_NAME"/docs/src/"$PKG_NAME_LOWERCASE"*.tst.autogen.md > "$JULIA_PKG_DIR$PKG_NAME"/docs/src/AutoDocTests.tst.autogen.md
	rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/"$PKG_NAME_LOWERCASE"*.tst.autogen.md
	
	# execute tests in the same session
	sed -i 's/```jldoctest/```jldoctest AutoDocTests/g' "$JULIA_PKG_DIR$PKG_NAME"/docs/src/AutoDocTests.tst.autogen.md
fi

chmod a-w "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.autogen.md
