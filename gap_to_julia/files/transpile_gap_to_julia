#!/bin/bash

set -e

GAP_PKG_DIR=~/.gap/pkg/
JULIA_CAP_PROJECT_DIR=~/.julia/dev/CAP_project.jl/
JULIA_CATEGORICAL_TOWERS_DIR=~/.julia/dev/CategoricalTowers.jl/
LOGS=1

PKG_NAME_LOWERCASE=$(echo "$PKG_NAME" | tr '[:upper:]' '[:lower:]')
[ "$LOGS" = "0" ] || echo "PKG_NAME_LOWERCASE: $PKG_NAME_LOWERCASE"

if [ -d "$GAP_PKG_DIR$PKG_NAME" ]; then
	PKG_FULL_NAME="$PKG_NAME"
elif [ -d "$GAP_PKG_DIR/CAP_project/$PKG_NAME" ]; then
	PKG_FULL_NAME="CAP_project/$PKG_NAME"
elif [ -d "$GAP_PKG_DIR/CategoricalTowers/$PKG_NAME" ]; then
	PKG_FULL_NAME="CategoricalTowers/$PKG_NAME"
else
	echo "Could not find GAP package $PKG_NAME"
	exit 1
fi

[ "$LOGS" = "0" ] || echo "PKG_FULL_NAME: $PKG_FULL_NAME"

if [ -d "$JULIA_CAP_PROJECT_DIR$PKG_NAME" ]; then
  JULIA_PKG_DIR=$JULIA_CAP_PROJECT_DIR
elif [ -d "$JULIA_CATEGORICAL_TOWERS_DIR$PKG_NAME" ]; then
  JULIA_PKG_DIR=$JULIA_CATEGORICAL_TOWERS_DIR
else
	echo "Could not find Julia package $PKG_NAME"
	exit 1
fi
[ "$LOGS" = "0" ] || echo "Julia package found in $JULIA_PKG_DIR$PKG_NAME"

cd "$GAP_PKG_DIR$PKG_FULL_NAME"
[ "$LOGS" = "0" ] || echo "Changed directory to $GAP_PKG_DIR$PKG_FULL_NAME"

cd gap
[ "$LOGS" = "0" ] || echo "Changed directory to $GAP_PKG_DIR$PKG_FULL_NAME/gap"

chmod -f u+w "$JULIA_PKG_DIR$PKG_NAME"/src/gap/*.autogen.jl || true
[ "$LOGS" = "0" ] || echo "Made files in $JULIA_PKG_DIR$PKG_NAME/src/gap writable"

syntax_replacements() {
	sed "s/ReadPackage( \"$1\", \"gap\/\\(.*\\)\" );$/include( \"\\1.autogen.jl\" );/g" \
  | sed 's/#% G2J:julia-only //g' \
	| sed 's/ = / == /g' \
	| sed 's/ <> / != /g' \
	| sed 's/ :=/ =/g' \
	| sed 's/ : /; /g' \
	| sed 's/ :$/,/g' \
	| sed 's/!\././g' \
	| sed 's/^\(\s*\)if /\1if (/g' \
	| sed 's/^\(\s*\)elif /\1elseif (/g' \
	| sed 's/ then$/)/g' \
	| sed 's/ fi;/ end;/g' \
	| sed 's/^fi;/end;/g' \
	| sed 's/ do$//g' \
	| sed 's/ od;/ end;/g' \
	| sed 's/^od;/end;/g' \
	`# We turn "not" into a macro "@not" which causes problems with "or", see gap_emulation.jl. To reduce the number if places which have to be adjust manually, we insert the parantheses here for three special cases.` \
	| sed 's/not \([^()]*([^()]*)\) or/not (\1) or/g' `# match "not func( arguments ) or"` \
	| sed 's/not \([^()][^()]*([^()]*([^()]*)[^()]*)\) or/not (\1) or/g' `# match "not func( ... func2( arguments ) ... ) or"` \
	| sed 's/not \([^()][^()]*([^()]*([^()]*)[^()]*([^()]*)[^()]*)\) or/not (\1) or/g' `# match "not func( ... func2( arguments ) ... func3( arguments ) ... ) or"` \
	| sed 's/"\([^"]*\)"/⦇\1⦈/g' `# replace pairs of quotation marks by special brackets so we can later selectively replace things inside strings` \
	| sed '/^\s*#/! s/ and / \&\& /g' \
	| sed '/^\s*#/! s/ and$/ \&\&/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' `# re-replace "&&" by "and" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) \&\& \([^⦇⦈]*\)⦈/⦇\1 and \2⦈/g' \
	| sed '/^\s*#/! s/ or / || /g' \
	| sed '/^\s*#/! s/ or$/ ||/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' `# re-replace "||" by "or" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\) || \([^⦇⦈]*\)⦈/⦇\1 or \2⦈/g' \
	| sed '/^\s*#/! s/not\s*(/!(/g' \
	| sed '/^\s*#/! s/not /@not /g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' `# re-replace "@not" by "not" inside strings, HACK: repeat this multiple times for multiple occurrences` \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)@not \([^⦇⦈]*\)⦈/⦇\1not \2⦈/g' \
	| sed 's/⦇\([^⦇⦈]*\)⦈/"\1"/g' `# replace special brackets by quotation marks again` \
	| sed 's/\.( \([^)]*\) )/[\1]/g' \
	| sed 's/\.(\([^)]*\))/[\1]/g' \
  | sed 's/\[ \([^].[]*\) \.\. \([^][]*\) \]\[/((\1):(\2))[/g' `# [ a .. b ][ -> ((a):(b))[ where a and b do not contain square brackets` \
  | sed 's/\[ \([^].[]*\) \.\. \([^][]*\) \]/(\1):(\2)/g' `# [ a .. b ] -> (a):(b) where a and b do not contain square brackets` \
  | sed 's/\[ \([^].[]*\) \.\. \([^][]*\)\[\([^].[]*\)\]\([^][]*\) \]/(\1):(\2[\3]\4)/g' `# [ a .. b ] -> (a):(b) where b contains a pair of square brackets` \
  | sed 's/\[ \([^].[]*\) \.\. \([^][]*\)\[\([^].[]*\)\]\[\([^].[]*\)\]\([^].[]*\)\]/(\1):(\2[\3][\4]\5)/g' `# [ a .. b ] -> (a):(b) where b contains two pairs of square brackets` \
	| sed 's/{ arg } ->/( arg... ) ->/g' \
	| sed 's/{\([^}]*\)} ->/(\1) ->/g' \
	| sed 's/{/[/g' \
	| sed 's/}/]/g' \
	| sed 's/function( arg )/function( arg... )/g' \
	| sed 's/function ( arg )/function ( arg... )/g' \
	| sed 's/Method( \\\[\\\],/Method( getindex,/g' \
	| sed 's/Method( \\\[\\,\\\],/Method( getindex,/g' \
	| sed 's/MethodForCompilerForCAP( \\\[\\\],/MethodForCompilerForCAP( getindex,/g' \
	| sed 's/MethodForCompilerForCAP( \\\[\\,\\\],/MethodForCompilerForCAP( getindex,/g' \
	| sed 's/Method( \\=,/Method( ==,/g' \
	| sed 's/Method( \\+,/Method( +,/g' \
	| sed 's/Method( \\-,/Method( -,/g' \
	| sed 's/Method( \\\*,/Method( *,/g' \
	| sed 's/Method( \\\/,/Method( \/,/g' \
	| sed 's/Method( \\\^,/Method( ^,/g' \
	| sed 's/Method( \\in,/Method( in,/g' \
  | sed 's/AtRuntime( \\=,/AtRuntime( ==,/g' \
	| sed 's/AtRuntime( \\+,/AtRuntime( +,/g' \
	| sed 's/AtRuntime( \\-,/AtRuntime( -,/g' \
	| sed 's/AtRuntime( \\\*,/AtRuntime( *,/g' \
	| sed 's/AtRuntime( \\\/,/AtRuntime( \/,/g' \
	| sed 's/AtRuntime( \\\^,/AtRuntime( ^,/g' \
	| sed 's/AtRuntime( \\in,/AtRuntime( in,/g' \
  | sed 's/Method( POW,/Method( ^,/g' \
	| sed 's/Method( AdditiveInverse,/Method( -,/g' \
	| sed 's/^DeclareInfoClass(/@DeclareInfoClass(/g' \
	| sed 's/^DeclareAttribute(/@DeclareAttribute(/g' \
	| sed 's/^DeclareSynonymAttr(/@DeclareSynonymAttr(/g' \
	| sed 's/^DeclareProperty(/@DeclareProperty(/g' \
	| sed 's/^DeclareFilter(/@DeclareFilter(/g' \
	| sed 's/^DeclareCategory(/@DeclareFilter(/g' \
	| sed 's/^InstallValue(/@InstallValueConst(/g' \
	| sed 's/InstallValue(/@InstallValue(/g' \
	| sed 's/BindGlobal(/@BindGlobal(/g' \
	| sed 's/DeclareSynonym(/@BindGlobal(/g' \
	| sed 's/DeclareGlobalFunction(/@DeclareGlobalFunction(/g' \
	| sed 's/InstallGlobalFunction(/@InstallGlobalFunction(/g' \
	| sed 's/^DeclareOperation(/@DeclareOperation(/g' \
	| sed 's/^DeclareOperationWithCache(/@DeclareOperation(/g' \
	| sed 's/^KeyDependentOperation(/@KeyDependentOperation(/g' \
	| sed 's/^InstallOtherMethod(/InstallMethod(/g' \
	| sed 's/^InstallMethodForCompilerForCAP(/InstallMethod(/g' \
	| sed 's/^InstallOtherMethodForCompilerForCAP(/InstallMethod(/g' \
	| sed 's/^InstallMethod(/@InstallMethod(/g' \
	| sed 's/\brec(/@rec(/g' \
	| sed 's/\bAssert(/@Assert(/g' \
	| sed 's/\bConcatenation(/@Concatenation(/g' \
	| sed 's/\bInfo(/@Info(/g' \
	| sed 's/\bUnbind(/@Unbind(/g' \
	| sed 's/\bIsBound(/@IsBound(/g' \
	| sed 's/\bNTuple\b/@NTupleGAP/g' \
	| sed 's/\bFunctionWithNamedArguments\b/@FunctionWithNamedArguments/g' \
	| sed 's/CAP_NAMED_ARGUMENTS\.//g' \
	| sed 's/\bPair\b/PairGAP/g' \
	| sed 's/\bUnion\b/UnionGAP/g' \
	| sed 's/\bInt\b/IntGAP/g' \
	| sed 's/\bString\b/StringGAP/g' \
	| sed 's/\bSet\b/SetGAP/g' \
	| sed 's/\bNumber\b/NumberGAP/g' \
  | sed 's/\bOneMutable\b/OneMutableGAP/g' \
	# terminate line continuation
}
export -f syntax_replacements

test_replacements() {
	# first, revert some code changes also affecting output lines
	sed '/^[>g]/! s/(\([0-9]*\)):(\([0-9]*\))/[ \1 .. \2 ]/g' \
	| sed '/^[>g]/! s/&&/and/g' \
	| sed 's/^<A[n ].*object in /<An object in /g' \
	| sed 's/^A[n ].*object in /An object in /g' \
	| sed 's/^<A[n ].*morphism in /<A morphism in /g' \
	| sed 's/^A[n ].*morphism in /A morphism in /g' \
	| sed 's/ @not yet algorithmically/ not yet algorithmically/g' \
	| sed 's/^gap> /julia> /g' \
	| sed 's/^> /        /g' \
	| sed 's/;$//g' \
	| sed 's/^julia> LoadPackage( .*/julia> true/g' \
	| sed 's/^julia> DeclareCategory(/julia> @DeclareFilter(/g' \
	| sed 's/^julia> DeclareOperation(/julia> @DeclareOperation(/g' \
	| sed 's/^julia> DeclareAttribute(/julia> @DeclareAttribute(/g' \
	| sed 's/^julia> InstallMethod(/julia> @InstallMethod(/g' \
	| sed 's/^\(\s*\)if /\1if (/g' \
	| sed '/^#/d' \
	| sed 's/julia> /\njulia> /g' \
	| sed "s/julia> START_TEST(.*/\`\`\`jldoctest\njulia> using $USING/g" \
	| sed 's/julia> STOP_TEST(.*/```/g' \
	# terminate line continuation
}
export -f test_replacements

for FILE in $(git ls-files); do
  if [[ "$FILE" != *CompilerLogic.gi && "$FILE" != *AUTOGENERATED_FROM.md ]]; then
	  cat "$FILE" | syntax_replacements $PKG_NAME > "$JULIA_PKG_DIR$PKG_NAME"/src/gap/"$FILE".autogen.jl
    [ "$LOGS" = "0" ] || echo "Alter & Copy $GAP_PKG_DIR$PKG_FULL_NAME/gap/$FILE to $JULIA_PKG_DIR$PKG_NAME/src/gap/$FILE.autogen.jl"
  fi
done

chmod -f a-w "$JULIA_PKG_DIR$PKG_NAME"/src/gap/*.autogen.jl
[ "$LOGS" = "0" ] || echo "Made files in $JULIA_PKG_DIR$PKG_NAME/src/gap read-only"

cd ../tst

chmod -f u+w "$JULIA_PKG_DIR$PKG_NAME"/docs/src/*.autogen.md || true
[ "$LOGS" = "0" ] || echo "Made files in $JULIA_PKG_DIR$PKG_NAME/docs/src writable"

# use perl to handle line continuation and empty lines starting comments
find . \( -type d -name .git -prune \) -o \( -type f -name '*.tst' \) -exec bash -c "cat '{}' | perl -p -e 's/\\\\\\n//' | perl -0 -p -e 's/\\n\\n#.*\\n/\\n/g' | syntax_replacements $PKG_NAME | test_replacements $PKG_NAME > \"$JULIA_PKG_DIR$PKG_NAME\"/docs/src/'{}'.autogen.md" \;
[ "$LOGS" = "0" ] || echo "Alter & Copy $GAP_PKG_DIR$PKG_FULL_NAME/gap/tst/*.tst to $JULIA_PKG_DIR$PKG_NAME/docs/src/*.autogen.md"

rm "$JULIA_PKG_DIR$PKG_NAME"/docs/src/100_LoadPackage.tst.autogen.md
[ "$LOGS" = "0" ] || echo "Remove $JULIA_PKG_DIR$PKG_NAME/docs/src/100_LoadPackage.tst.autogen.md"

