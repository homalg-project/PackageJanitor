- name: Set package variables for {{ current_package.package_name }}
  set_fact:
    package_name: "{{ current_package.package_name }}"
    project_name: "{{ current_package.project_name }}"
    package_description: "{{ current_package.package_description | default('') }}"
    package_uuid: "{{ current_package.package_uuid | default('') }}"
    package_version: "{{ current_package.package_version | default('0.0.1') }}"
    julia_version: "{{ current_package.julia_version | default('1.11') }}"
    dependencies: "{{ current_package.dependencies | default({}) }}"
    weak_dependencies: "{{ current_package.weak_dependencies | default({}) }}"
    extras: "{{ current_package.extras | default([]) }}"
    targets: "{{ current_package.targets | default({'test': 'default'}) }}"
    disable_method_overwrite_warning: "{{ current_package.disable_method_overwrite_warning | default(false) }}"
    cleanup_test_files_by_keywords: "{{ current_package.cleanup_test_files_by_keywords | default([]) }}"
    parent_directory: ~/.julia/dev/{{ current_package.project_name }}
    package_directory: ~/.julia/dev/{{ current_package.project_name }}/{{ current_package.package_name }}
    gap_package_directory: "~/.gap/pkg/{{ current_package.project_name | regex_replace('.jl', '') }}/{{ current_package.package_name }}"

- name: Verify the GAP package {{ package_name }} exists
  stat:
    path: "{{ gap_package_directory }}"
  register: gap_package_directory_exists

- name: Fail if the GAP package {{ package_name }} does not exist
  fail:
    msg: "The GAP package directory '{{ gap_package_directory }}' does not exist!"
  when: not gap_package_directory_exists.stat.exists

- name: Run 'gap makedoc.g' in {{ gap_package_directory }} to update documentation
  command: gap -q -c 'makedoc.g'
  args:
    chdir: '{{ gap_package_directory }}'
  register: makedoc_result
  changed_when: makedoc_result.stdout != ''

- name: Does the GAP package {{ package_name }} contains a gap/precompiled_categories directory?
  stat:
    path: "{{ gap_package_directory }}/gap/precompiled_categories"
  register: precompiled_categories_directory_exists

- name: Ensure the parent directory for the Julia package exists
  stat:
    path: "{{ parent_directory }}"
  register: parent_directory_exists

- name: Fail if the parent directory does not exist
  fail:
    msg: "The parent directory '{{ parent_directory }}' does not exist!"
  when: not parent_directory_exists.stat.exists

- name: Check whether the Julia package directory already exists
  stat:
    path: '{{ package_directory }}'
  register: package_directory_exists

- name: Generate Julia package using Pkg.generate if it does not exist
  command: >
    julia -e "using Pkg; Pkg.generate(\"{{ package_name }}\")"
  args:
    chdir: '{{ parent_directory }}'
  when: package_directory_exists.stat.exists == false
  register: generate_julia_package

- name: Add LICENSE file to package
  copy:
    src: LICENSE
    dest: "{{ package_directory }}/LICENSE"
    mode: '0644'

- name: Add {{ package_name }}.jl file to package
  template:
    src: package.jl.j2
    dest: "{{ package_directory }}/src/{{ package_name }}.jl"
    mode: '0644'

- name: Add Makefile to package
  template:
    src: makefile.j2
    dest: "{{ package_directory }}/makefile"
    mode: '0644'

- name: Extract the package authors
  shell: gap -q -c '{{ display_authors_command }}'
  register: package_authors
  vars:
    display_authors_command: |
      Print(
        JoinStringsWithSeparator(
          List( PackageInfo("{{ package_name }}")[1].Persons,
            person -> Concatenation( "  \"", person.FirstNames, " ", person.LastName, " <", person.Email, ">\"")), ",\n"), "\n");
      QuitGap

- name: Extract the package verion in GAP
  shell: gap -q -c '{{ package_version_in_gap_command }}'
  register: package_version_in_gap
  vars:
    package_version_in_gap_command: |
      Print( PackageInfo("{{ package_name }}")[1].Version, "\n");
      QuitGap();

- name: Find the UUIDs of dependencies
  shell: julia -e 'using Pkg; packages= {{ dependencies_names }}; uuids = join([name * " = \"" * string(uuid) * "\"" for name in packages for (uuid, package) in Pkg.dependencies() if package.name == name], "\n"); println(uuids)'
  when: dependencies
  register: dependencies_uuids
  changed_when: false
  vars:
    dependencies_names: "{{ dependencies.keys() | list | to_json }}"

- name: Find the UUIDs of weak_dependencies
  shell: julia -e 'using Pkg; packages= {{ weak_dependencies_names }}; uuids = join([name * " = \"" * string(uuid) * "\"" for name in packages for (uuid, package) in Pkg.dependencies() if package.name == name], "\n"); println(uuids)'
  when: weak_dependencies
  register: weak_dependencies_uuids
  changed_when: false
  vars:
    weak_dependencies_names: "{{ weak_dependencies.keys() | list | to_json }}"

- name: Find the UUIDs of extras
  shell: julia -e 'using Pkg; packages= {{ extras_names }}; uuids = join([name * " = \"" * string(uuid) * "\"" for name in packages for (uuid, package) in Pkg.dependencies() if package.name == name], "\n"); println(uuids)'
  when: extras
  register: extras_uuids
  changed_when: false
  vars:
    extras_names: "{{ extras | to_json }}"

- name: Add Project.toml to package
  template:
    src: Project.toml.j2
    dest: "{{ package_directory }}/Project.toml"
    mode: '0644'

- name: Add README.md to package
  template:
    src: README.md.j2
    dest: "{{ package_directory }}/README.md"
    mode: '0644'

- name: Make sure the directory test exists
  file:
    path: "{{ package_directory }}/test"
    state: directory
    mode: '0755'

- name: Make sure the directories src/gap, docs/src and test exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ package_directory }}/src"
    - "{{ package_directory }}/src/gap"
    - "{{ package_directory }}/docs"
    - "{{ package_directory }}/docs/src"
    - "{{ package_directory }}/test"

- name: Make sure the directory src/gap/precompiled_categories exists
  file:
    path: "{{ package_directory }}/src/gap/precompiled_categories"
    state: directory
    mode: '0755'
  when: precompiled_categories_directory_exists.stat.exists

- name: Add runtests.jl in test directory
  template:
    src: runtests.jl.j2
    dest: "{{ package_directory }}/test/runtests.jl"
    mode: '0644'

- name: Copy init.jl to src directory
  copy:
    src: init.jl
    dest: "{{ package_directory }}/src/init.jl"
    mode: '0644'

- name: Copy read.g and init.g files into julia src directory
  copy:
    src: '{{ gap_package_directory }}/{{ item }}'
    dest: '{{ package_directory }}/src/{{ item }}.autogen.jl'
    mode: '0644'
  with_items:
    - read.g
    - init.g

- name: Alter read- & init.g.autogen.jl files in-place
  shell: |
    sed -i \
      -e 's/ReadPackage/include/g' \
      -e 's/"{{ package_name }}"\s*,\s*//g' \
      -e 's/\.g\([di]\)"/.g\1.autogen.jl"/g' \
      {{ package_directory }}/src/{{ item }}
  with_items:
    - read.g.autogen.jl
    - init.g.autogen.jl

- name: Transpile GAP code to Julia using the script transpile_gap_to_julia
  shell: '{{ playbook_dir }}/files/transpile_gap_to_julia {{ package_name }}'
  args:
    executable: /bin/bash
  register: transpile_result

- name: Find files in the docs/src
  find:
    paths: '{{ package_directory }}/docs/src'
    patterns: '*.md'
  register: docs_src_files

- name: Filter the test files by keyswords
  shell: |
    grep -l -e "{{ cleanup_test_files_by_keywords | join('" -e "') }}" "{{ item.path }}" || true
  loop: '{{ docs_src_files.files }}'
  when: cleanup_test_files_by_keywords | length > 0
  register: matched_files
  changed_when: false

- name: Extract matching file paths
  set_fact:
    cleanup_test_files: '{{ matched_files.results | selectattr("stdout", "!=", "") | map(attribute="stdout") | list }}'

- name: Remove files that contain the keyword
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ cleanup_test_files }}"
  when: cleanup_test_files | length > 0
  register: removed_files

- name: Find AutoDocTest fragments
  find:
    paths: '{{ package_directory }}/docs/src'
    patterns: '{{ package_name | lower }}*.tst.autogen.md'
  register: autodoctest_files

- name: Merge AutoDocTest fragments
  shell: |
    cat {{ autodoctest_files.files | map(attribute='path') | join(' ') }} > {{ package_directory }}/docs/src/AutoDocTests.tst.autogen.md
  when: autodoctest_files.matched     
- name: Remove AutoDocTest fragments
  file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ autodoctest_files.files }}'
  when: autodoctest_files.matched > 0

- name: Execute tests in the same session
  shell: |
    sed -i 's/```jldoctest/```jldoctest AutoDocTests/g' {{ package_directory }}/docs/src/AutoDocTests.tst.autogen.md

- name: debug
  debug:
    msg: "{{ autodoctest_files.files | map(attribute='path') | list }}"

- name: Display success message
  debug:
    msg: "Julia package '{{ package_name }}' created/updated in '{{ parent_directory }}'"