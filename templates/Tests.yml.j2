name: Tests

on:
  push:
    branches:
      - "master"
      - "*-ci"
  pull_request:
  schedule:
    - cron: "0 4 * * *" # after gap-docker(-master) is rebuilt
  workflow_dispatch:

# cancel runs for pull requests on force push
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}-${{ github.run_attempt }}{% endraw %}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      matrix:
        image: ["ghcr.io/homalg-project/gap-docker:latest", "ghcr.io/homalg-project/gap-docker-master:latest"]
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: {% raw %}${{ matrix.image }}{% endraw %}
    defaults:
      run:
        working-directory: /home/gap/.gap/pkg/
    env:
      # HOME is already set in the docker container, but GitHub Actions overwrites it
      HOME: /home/gap
    steps:
      - name: Keep workflow active even if repository has no activity for 60 days
        if: github.event_name != 'pull_request'
        run: |
          curl --fail -X PUT -H "Accept: application/vnd.github.v3+json" -H "Authorization: token {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}" "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/Tests.yml/enable"
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          # the persisted token interferes with the subsplit token used below
          persist-credentials: false
          fetch-depth: 0
      - name: Move checked out repo to GAP user root dir
        run: |
          cp -a $GITHUB_WORKSPACE /home/gap/.gap/pkg/
    {%- if ci_ubuntu_additional_apt_packages is defined %}
      - name: Install additional apt packages
        run: |
          sudo apt update
          sudo apt install -y{% for apt_package in ci_ubuntu_additional_apt_packages %} {{ apt_package }}{% endfor %}
    {%- endif %}
      - name: Prepare environment
        run: |
          cp ./{{ package.name }}/dev/ci_gaprc /home/gap/.gap/gaprc
          git clone --depth 1 -vv https://github.com/gap-packages/AutoDoc.git
        {%- for additional_repo in ci_additional_repositories_enriched %}
          git clone --depth 1 -vv https://github.com/{% if "/" not in additional_repo %}homalg-project/{% endif %}{{ additional_repo }}.git
        {%- endfor %}
      - name: Build documentation of packages which we might want to reference
        run: |
          # keep this in sync with `dev/.release`
        {%- for package_with_doc in ["CAP_project/CAP", "CAP_project/CompilerForCAP", "CAP_project/MonoidalCategories", "CAP_project/CartesianCategories", "CAP_project/FreydCategoriesForCAP", "HigherHomologicalAlgebra/ToolsForHigherHomologicalAlgebra", "homalg_project/homalg", "homalg_project/Modules", "CategoricalTowers/ToolsForCategoricalTowers", "CategoricalTowers/Toposes" ] %}
          if [ -d "{{ package_with_doc }}" ]; then make -C "{{ package_with_doc }}" doc; fi
        {%- endfor %}
    {%- if ci_do_not_run_tests is not defined or not ci_do_not_run_tests %}
      - name: Test {{ package.name }}
        run: |
          make -C {{ package.name }} --trace -j $(nproc) --output-sync ci-test
    {%- else %}
      - name: Build documentation of {{ package.name }}
        run: |
          make -C {{ package.name }} --trace -j $(nproc) --output-sync doc
    {%- endif %}
    {%- for package_to_test in ci_packages_to_test %}
      - name: Test {{ package_to_test }}
        run: |
          make -C {{ package_to_test }} --trace -j $(nproc) --output-sync ci-test
    {%- endfor %}
      - name: Release package or simulate release
        run: |
          cd {{ package.name }}
        {%- if ci_do_not_run_tests is not defined or not ci_do_not_run_tests %}
          python3 dev/process_coverage.py
        {%- endif %}
          git config --global user.name "Bot"
          git config --global user.email "empty"
          CUR_SHA=$(git rev-parse --verify HEAD)
          git fetch origin gh-pages
          git worktree add gh-pages/ gh-pages || (echo "There was an error. Make sure there is a branch named 'gh-pages'. See https://github.com/homalg-project/PackageJanitor#error-there-was-an-error-make-sure-there-is-a-branch-named-gh-pages"; exit 1)
        {%- if ci_automated_release is not defined or ci_automated_release %}
          if [ "{% raw %}${{ matrix.image }}{% endraw %}" = "ghcr.io/homalg-project/gap-docker:latest" ] && [ "$CUR_SHA" = "$(git rev-parse origin/master)" ] && [ $(dirname "$GITHUB_REPOSITORY") = "homalg-project" ]; then \
            git checkout master; \
            TOKEN="{% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}" SUBSPLIT_PUSH_SECRET="{% raw %}${{ secrets.SUBSPLIT_PUSH_SECRET }}{% endraw %}" ./dev/make_dist.sh; \
          else \
            TOKEN="{% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}" ./dev/simulate_dist.sh; \
          fi
        {%- endif %}
    {%- if ci_do_not_run_tests is not defined or not ci_do_not_run_tests %}
      - name: Upload code coverage
        if: github.event_name != 'schedule' && matrix.image == 'ghcr.io/homalg-project/gap-docker:latest'
        run: |
          cd {{ package.name }}
          ./dev/upload_codecov.sh
    {%- endif %}
